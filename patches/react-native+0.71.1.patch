diff --git a/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js b/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js
index 0c2ecf2..a04414f 100644
--- a/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js
+++ b/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js
@@ -1819,9 +1819,14 @@ class ScrollView extends React.Component<Props, State> {
         // Note: we should split props.style on the inner and outer props
         // however, the ScrollView still needs the baseStyle to be scrollable
         const {outer, inner} = splitLayoutProps(flattenStyle(props.style));
+        let inverted;
+        if (inner.scaleY) {
+          inverted = {scaleY: -1};
+          delete inner['scaleY']
+        }
         return React.cloneElement(
           refreshControl,
-          {style: StyleSheet.compose(baseStyle, outer)},
+          {style: StyleSheet.compose(baseStyle, outer, inverted)},
           <NativeDirectionalScrollView
             {...props}
             style={StyleSheet.compose(baseStyle, inner)}
diff --git a/node_modules/react-native/Libraries/Lists/VirtualizedList.js b/node_modules/react-native/Libraries/Lists/VirtualizedList.js
index 2629142..bcc5386 100644
--- a/node_modules/react-native/Libraries/Lists/VirtualizedList.js
+++ b/node_modules/react-native/Libraries/Lists/VirtualizedList.js
@@ -30,6 +30,7 @@ import flattenStyle from '../StyleSheet/flattenStyle';
 import StyleSheet from '../StyleSheet/StyleSheet';
 import clamp from '../Utilities/clamp';
 import infoLog from '../Utilities/infoLog';
+import Platform from '../Utilities/Platform';
 import {CellRenderMask} from './CellRenderMask';
 import ChildListCollection from './ChildListCollection';
 import FillRateHelper from './FillRateHelper';
@@ -1841,7 +1842,10 @@ export default class VirtualizedList extends StateSafePureComponent<
 
 const styles = StyleSheet.create({
   verticallyInverted: {
-    transform: [{scaleY: -1}],
+    ...Platform.select({
+      android: {scaleY: -1},
+      ios: {transform: [{scaleY: -1}]},
+    }),
   },
   horizontallyInverted: {
     transform: [{scaleX: -1}],
diff --git a/node_modules/react-native/jest/react-native-env.js b/node_modules/react-native/jest/react-native-env.js
index 624d364..bb09c57 100644
--- a/node_modules/react-native/jest/react-native-env.js
+++ b/node_modules/react-native/jest/react-native-env.js
@@ -13,6 +13,6 @@ const NodeEnv = require('jest-environment-node').TestEnvironment;
 
 module.exports = class ReactNativeEnv extends NodeEnv {
   exportConditions() {
-    return ['react-native'];
+    return ['react-native', 'node'];
   }
 };
diff --git a/node_modules/react-native/jest/setup.js b/node_modules/react-native/jest/setup.js
index 3738bd2..547e0c0 100644
--- a/node_modules/react-native/jest/setup.js
+++ b/node_modules/react-native/jest/setup.js
@@ -21,6 +21,7 @@ global.performance = {
   now: jest.fn(Date.now),
 };
 
+global.Promise = jest.requireActual('promise');
 global.regeneratorRuntime = jest.requireActual('regenerator-runtime/runtime');
 global.window = global;
 
diff --git a/node_modules/react-native/react.gradle b/node_modules/react-native/react.gradle
index 250299b..6e8e6a0 100644
--- a/node_modules/react-native/react.gradle
+++ b/node_modules/react-native/react.gradle
@@ -159,7 +159,7 @@ def enableHermesForVariant = config.enableHermesForVariant ?: {
 def hermesFlagsForVariant = config.hermesFlagsForVariant ?: {
     def variant ->
         def hermesFlags;
-        if (variant.name.toLowerCase().contains("release")) {
+        if (variant.name.toLowerCase().contains("release") || variant.name.toLowerCase().contains("unsigned")) {
             // Can't use ?: since that will also substitute valid empty lists
             hermesFlags = config.hermesFlagsRelease
             if (hermesFlags == null) hermesFlags = ["-O", "-output-source-map"]
@@ -175,7 +175,7 @@ def hermesFlagsForVariant = config.hermesFlagsForVariant ?: {
 def disableDevForVariant = config.disableDevForVariant ?: {
     def variant ->
       config."devDisabledIn${variant.name.capitalize()}" ||
-      variant.name.toLowerCase().contains("release")
+      variant.name.toLowerCase().contains("release") || variant.name.toLowerCase().contains("unsigned")
 }
 
 // Set bundleForVariant to a function to configure per variant,
@@ -184,13 +184,13 @@ def bundleForVariant = config.bundleForVariant ?: {
     def variant ->
       config."bundleIn${variant.name.capitalize()}" ||
       config."bundleIn${variant.buildType.name.capitalize()}" ||
-      variant.name.toLowerCase().contains("release")
+      variant.name.toLowerCase().contains("release") || variant.name.toLowerCase().contains("unsigned")
 }
 
 // Set deleteDebugFilesForVariant to a function to configure per variant,
 // defaults to True for Release variants and False for debug variants
 def deleteDebugFilesForVariant = config.deleteDebugFilesForVariant ?: {
-    def variant -> variant.name.toLowerCase().contains("release")
+    def variant -> variant.name.toLowerCase().contains("release") || variant.name.toLowerCase().contains("unsigned")
 }
 
 android {
