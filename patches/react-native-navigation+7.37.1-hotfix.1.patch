diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/NavigationActivity.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/NavigationActivity.java
index 8ddc3d5..609e359 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/NavigationActivity.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/NavigationActivity.java
@@ -1,18 +1,15 @@
 package com.reactnativenavigation;
 
-import android.annotation.TargetApi;
 import android.content.Intent;
 import android.content.res.Configuration;
-import android.graphics.Color;
-import android.os.Build;
 import android.os.Bundle;
 import android.view.KeyEvent;
 import android.view.View;
 
+import com.facebook.react.ReactActivity;
 import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;
 import com.facebook.react.modules.core.PermissionAwareActivity;
 import com.facebook.react.modules.core.PermissionListener;
-import com.reactnativenavigation.options.Options;
 import com.reactnativenavigation.viewcontrollers.overlay.OverlayManager;
 import com.reactnativenavigation.viewcontrollers.viewcontroller.RootPresenter;
 import com.reactnativenavigation.react.JsDevReloadHandler;
@@ -25,9 +22,8 @@ import com.reactnativenavigation.viewcontrollers.navigator.Navigator;
 import androidx.activity.OnBackPressedCallback;
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
-import androidx.appcompat.app.AppCompatActivity;
 
-public class NavigationActivity extends AppCompatActivity implements DefaultHardwareBackBtnHandler, PermissionAwareActivity, JsDevReloadHandler.ReloadListener {
+public class NavigationActivity extends ReactActivity implements DefaultHardwareBackBtnHandler, PermissionAwareActivity, JsDevReloadHandler.ReloadListener {
     @Nullable
     private PermissionListener mPermissionListener;
 
@@ -50,7 +46,7 @@ public class NavigationActivity extends AppCompatActivity implements DefaultHard
         );
         navigator.bindViews();
         getReactGateway().onActivityCreated(this);
-        setBackPressedCallback();
+        // setBackPressedCallback();
     }
 
     @Override
@@ -96,15 +92,16 @@ public class NavigationActivity extends AppCompatActivity implements DefaultHard
 
     @Override
     public void invokeDefaultOnBackPressed() {
-        if (!navigator.handleBack(new CommandListenerAdapter())) {
-            callback.setEnabled(false);
-            NavigationActivity.super.onBackPressed();
-            callback.setEnabled(true);
-        }
+        // if (!navigator.handleBack(new CommandListenerAdapter())) {
+        //     callback.setEnabled(false);
+        //     NavigationActivity.super.onBackPressed();
+        //     callback.setEnabled(true);
+        // }
+        super.invokeDefaultOnBackPressed();
     }
 
     @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
         getReactGateway().onActivityResult(this, requestCode, resultCode, data);
     }
@@ -126,7 +123,6 @@ public class NavigationActivity extends AppCompatActivity implements DefaultHard
         return navigator;
     }
 
-    @TargetApi(Build.VERSION_CODES.M)
     public void requestPermissions(String[] permissions, int requestCode, PermissionListener listener) {
         mPermissionListener = listener;
         requestPermissions(permissions, requestCode);
@@ -134,6 +130,7 @@ public class NavigationActivity extends AppCompatActivity implements DefaultHard
 
     @Override
     public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
         NavigationApplication.instance.onRequestPermissionsResult(requestCode, permissions, grantResults);
         if (mPermissionListener != null && mPermissionListener.onRequestPermissionsResult(requestCode, permissions, grantResults)) {
             mPermissionListener = null;
diff --git a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/NavigationModule.java b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/NavigationModule.java
index 195973f..c5dbafe 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/NavigationModule.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/main/java/com/reactnativenavigation/react/NavigationModule.java
@@ -66,15 +66,22 @@ public class NavigationModule extends ReactContextBaseJavaModule {
 
             @Override
             public void onHostResume() {
-                eventEmitter = new EventEmitter(reactContext);
-                navigator().setEventEmitter(eventEmitter);
-                layoutFactory.init(
-                        activity(),
-                        eventEmitter,
-                        navigator().getChildRegistry(),
-                        ((NavigationApplication) activity().getApplication()).getExternalComponents()
-                );
-                UiUtils.runOnMainThread(() -> navigator().onHostResume());
+                try {
+                    eventEmitter = new EventEmitter(reactContext);
+                    Navigator navigator = navigator();
+                    if (navigator != null) {
+                        navigator().setEventEmitter(eventEmitter);
+                        layoutFactory.init(
+                                activity(),
+                                eventEmitter,
+                                navigator().getChildRegistry(),
+                                ((NavigationApplication) activity().getApplication()).getExternalComponents()
+                        );
+                        UiUtils.runOnMainThread(() -> navigator().onHostResume());
+                    }
+                } catch (ClassCastException e) {
+                    // The most current activity is not a NavigationActivity
+                }
             }
         });
     }
@@ -212,7 +219,10 @@ public class NavigationModule extends ReactContextBaseJavaModule {
     }
 
     private Navigator navigator() {
-        return activity().getNavigator();
+        if (activity() instanceof NavigationActivity) {
+            return ((NavigationActivity)activity()).getNavigator();
+        }
+        return null;
     }
 
     private Options parse(@Nullable ReadableMap mergeOptions) {
@@ -223,19 +233,23 @@ public class NavigationModule extends ReactContextBaseJavaModule {
 
     protected void handle(Runnable task) {
         UiThread.post(() -> {
-            if (getCurrentActivity() != null && !activity().isFinishing()) {
-                task.run();
+            try {
+                if (getCurrentActivity() != null && !activity().isFinishing()) {
+                    task.run();
+                }
+            } catch (ClassCastException e) {
+                // The most current activity is not a NavigationActivity)
             }
         });
     }
 
-    protected NavigationActivity activity() {
-        return (NavigationActivity) getCurrentActivity();
+    protected Activity activity() {
+        return getCurrentActivity();
     }
 
     @Override
     public void onCatalystInstanceDestroy() {
-        final NavigationActivity navigationActivity = activity();
+        final NavigationActivity navigationActivity = (NavigationActivity)activity();
         if (navigationActivity != null) {
             navigationActivity.onCatalystInstanceDestroy();
         }
diff --git a/node_modules/react-native-navigation/lib/android/app/src/reactNative71/java/com/reactnativenavigation/react/ReactGateway.java b/node_modules/react-native-navigation/lib/android/app/src/reactNative71/java/com/reactnativenavigation/react/ReactGateway.java
index 035ec31..630b8d4 100644
--- a/node_modules/react-native-navigation/lib/android/app/src/reactNative71/java/com/reactnativenavigation/react/ReactGateway.java
+++ b/node_modules/react-native-navigation/lib/android/app/src/reactNative71/java/com/reactnativenavigation/react/ReactGateway.java
@@ -69,4 +69,10 @@ public class ReactGateway {
     public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {
         host.getReactInstanceManager().onActivityResult(activity, requestCode, resultCode, data);
     }
+
+    public void onWindowFocusChanged(boolean hasFocus) {
+        if (host.hasInstance()) {
+            host.getReactInstanceManager().onWindowFocusChange(hasFocus);
+        }
+    }
 }
diff --git a/node_modules/react-native-navigation/lib/ios/RNNComponentViewController.m b/node_modules/react-native-navigation/lib/ios/RNNComponentViewController.m
index fc482a6..9406bbf 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNComponentViewController.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNComponentViewController.m
@@ -94,6 +94,7 @@
                                                                }];
                                   }];
         self.reactView.backgroundColor = UIColor.clearColor;
+        self.reactView.frame = UIScreen.mainScreen.bounds;
         self.reactView.autoresizingMask = UIViewAutoresizingFlexibleWidth;
         [self.reactView setFrame:self.view.frame];
         [self.view addSubview:self.reactView];
diff --git a/node_modules/react-native-navigation/lib/ios/RNNOverlayWindow.m b/node_modules/react-native-navigation/lib/ios/RNNOverlayWindow.m
index b44f24f..bf4e1c3 100644
--- a/node_modules/react-native-navigation/lib/ios/RNNOverlayWindow.m
+++ b/node_modules/react-native-navigation/lib/ios/RNNOverlayWindow.m
@@ -1,6 +1,8 @@
 #import "RNNOverlayWindow.h"
 #import "RNNReactView.h"
 #import <React/RCTModalHostView.h>
+#import <react-native-safe-area-context/RNCSafeAreaView.h>
+#import <react-native-safe-area-context/RNCSafeAreaProvider.h>
 
 @implementation RNNOverlayWindow
 
@@ -9,6 +11,8 @@
 
     if ([hitTestResult isKindOfClass:[UIWindow class]] ||
         [hitTestResult.subviews.firstObject isKindOfClass:RNNReactView.class] ||
+        [hitTestResult isKindOfClass:[RNCSafeAreaView class]] ||
+        [hitTestResult isKindOfClass:[RNCSafeAreaProvider class]] ||
         [hitTestResult isKindOfClass:[RCTModalHostView class]] ||
         [hitTestResult isKindOfClass:NSClassFromString(@"RCTRootComponentView")]) {
         return nil;
diff --git a/node_modules/react-native-navigation/lib/src/interfaces/Options.ts b/node_modules/react-native-navigation/lib/src/interfaces/Options.ts
index 4851b40..e891183 100644
--- a/node_modules/react-native-navigation/lib/src/interfaces/Options.ts
+++ b/node_modules/react-native-navigation/lib/src/interfaces/Options.ts
@@ -1,5 +1,5 @@
 // tslint:disable jsdoc-format
-import { ImageRequireSource, ImageSourcePropType, Insets, OpaqueColorValue } from 'react-native';
+import type { ImageRequireSource, ImageSourcePropType, Insets, OpaqueColorValue } from 'react-native';
 
 // TODO: Import ColorValue instead when upgrading @types/react-native to 0.63+
 // Only assign PlatformColor or DynamicColorIOS as a Color symbol!
